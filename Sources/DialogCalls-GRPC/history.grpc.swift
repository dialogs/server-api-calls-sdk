//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: history.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

public protocol Dialog_CallHistoryServiceDeleteHistoryCall: ClientCallUnary {}

fileprivate final class Dialog_CallHistoryServiceDeleteHistoryCallBase: ClientCallUnaryBase<Dialog_DeleteHistoryRequest, Dialog_DeleteHistoryResponse>, Dialog_CallHistoryServiceDeleteHistoryCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.history.api.CallHistoryService/DeleteHistory" }
}

public protocol Dialog_CallHistoryServiceGetDiffCall: ClientCallUnary {}

fileprivate final class Dialog_CallHistoryServiceGetDiffCallBase: ClientCallUnaryBase<Dialog_GetDiffRequet, Dialog_GetDiffResponse>, Dialog_CallHistoryServiceGetDiffCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.history.api.CallHistoryService/GetDiff" }
}

public protocol Dialog_CallHistoryServiceGetPageCall: ClientCallUnary {}

fileprivate final class Dialog_CallHistoryServiceGetPageCallBase: ClientCallUnaryBase<Dialog_GetPageRequest, Dialog_GetPageResponse>, Dialog_CallHistoryServiceGetPageCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.history.api.CallHistoryService/GetPage" }
}

public protocol Dialog_CallHistoryServiceConnectCall: ClientCallBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Dialog_ConnectResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Dialog_ConnectResponse?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: Dialog_ConnectRequest, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Dialog_ConnectRequest, timeout: DispatchTime) throws

  /// Call this to close the sending connection. Blocking.
  func closeSend() throws
  /// Call this to close the sending connection. Nonblocking.
  func closeSend(completion: (() -> Void)?) throws
}

public extension Dialog_CallHistoryServiceConnectCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Dialog_ConnectResponse? { return try self._receive(timeout: timeout) }
}

public extension Dialog_CallHistoryServiceConnectCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Dialog_ConnectRequest, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Dialog_CallHistoryServiceConnectCallBase: ClientCallBidirectionalStreamingBase<Dialog_ConnectRequest, Dialog_ConnectResponse>, Dialog_CallHistoryServiceConnectCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.history.api.CallHistoryService/Connect" }
}


/// Instantiate Dialog_CallHistoryServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Dialog_CallHistoryServiceService: ServiceClient {
  /// Synchronous. Unary.
  func deleteHistory(_ request: Dialog_DeleteHistoryRequest, metadata customMetadata: Metadata) throws -> Dialog_DeleteHistoryResponse
  /// Asynchronous. Unary.
  @discardableResult
  func deleteHistory(_ request: Dialog_DeleteHistoryRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_DeleteHistoryResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceDeleteHistoryCall

  /// Synchronous. Unary.
  func getDiff(_ request: Dialog_GetDiffRequet, metadata customMetadata: Metadata) throws -> Dialog_GetDiffResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getDiff(_ request: Dialog_GetDiffRequet, metadata customMetadata: Metadata, completion: @escaping (Dialog_GetDiffResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceGetDiffCall

  /// Synchronous. Unary.
  func getPage(_ request: Dialog_GetPageRequest, metadata customMetadata: Metadata) throws -> Dialog_GetPageResponse
  /// Asynchronous. Unary.
  @discardableResult
  func getPage(_ request: Dialog_GetPageRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_GetPageResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceGetPageCall

  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  func connect(metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Dialog_CallHistoryServiceConnectCall

}

public extension Dialog_CallHistoryServiceService {
  /// Synchronous. Unary.
  func deleteHistory(_ request: Dialog_DeleteHistoryRequest) throws -> Dialog_DeleteHistoryResponse {
    return try self.deleteHistory(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func deleteHistory(_ request: Dialog_DeleteHistoryRequest, completion: @escaping (Dialog_DeleteHistoryResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceDeleteHistoryCall {
    return try self.deleteHistory(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getDiff(_ request: Dialog_GetDiffRequet) throws -> Dialog_GetDiffResponse {
    return try self.getDiff(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getDiff(_ request: Dialog_GetDiffRequet, completion: @escaping (Dialog_GetDiffResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceGetDiffCall {
    return try self.getDiff(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func getPage(_ request: Dialog_GetPageRequest) throws -> Dialog_GetPageResponse {
    return try self.getPage(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func getPage(_ request: Dialog_GetPageRequest, completion: @escaping (Dialog_GetPageResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceGetPageCall {
    return try self.getPage(request, metadata: self.metadata, completion: completion)
  }

  /// Asynchronous. Bidirectional-streaming.
  func connect(completion: ((CallResult) -> Void)?) throws -> Dialog_CallHistoryServiceConnectCall {
    return try self.connect(metadata: self.metadata, completion: completion)
  }

}

public final class Dialog_CallHistoryServiceServiceClient: ServiceClientBase, Dialog_CallHistoryServiceService {
  /// Synchronous. Unary.
  public func deleteHistory(_ request: Dialog_DeleteHistoryRequest, metadata customMetadata: Metadata) throws -> Dialog_DeleteHistoryResponse {
    return try Dialog_CallHistoryServiceDeleteHistoryCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func deleteHistory(_ request: Dialog_DeleteHistoryRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_DeleteHistoryResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceDeleteHistoryCall {
    return try Dialog_CallHistoryServiceDeleteHistoryCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func getDiff(_ request: Dialog_GetDiffRequet, metadata customMetadata: Metadata) throws -> Dialog_GetDiffResponse {
    return try Dialog_CallHistoryServiceGetDiffCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func getDiff(_ request: Dialog_GetDiffRequet, metadata customMetadata: Metadata, completion: @escaping (Dialog_GetDiffResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceGetDiffCall {
    return try Dialog_CallHistoryServiceGetDiffCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func getPage(_ request: Dialog_GetPageRequest, metadata customMetadata: Metadata) throws -> Dialog_GetPageResponse {
    return try Dialog_CallHistoryServiceGetPageCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func getPage(_ request: Dialog_GetPageRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_GetPageResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceGetPageCall {
    return try Dialog_CallHistoryServiceGetPageCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  public func connect(metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Dialog_CallHistoryServiceConnectCall {
    return try Dialog_CallHistoryServiceConnectCallBase(channel)
      .start(metadata: customMetadata, completion: completion)
  }

}

class Dialog_CallHistoryServiceDeleteHistoryCallTestStub: ClientCallUnaryTestStub, Dialog_CallHistoryServiceDeleteHistoryCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.history.api.CallHistoryService/DeleteHistory" }
}

class Dialog_CallHistoryServiceGetDiffCallTestStub: ClientCallUnaryTestStub, Dialog_CallHistoryServiceGetDiffCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.history.api.CallHistoryService/GetDiff" }
}

class Dialog_CallHistoryServiceGetPageCallTestStub: ClientCallUnaryTestStub, Dialog_CallHistoryServiceGetPageCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.history.api.CallHistoryService/GetPage" }
}

class Dialog_CallHistoryServiceConnectCallTestStub: ClientCallBidirectionalStreamingTestStub<Dialog_ConnectRequest, Dialog_ConnectResponse>, Dialog_CallHistoryServiceConnectCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.history.api.CallHistoryService/Connect" }
}

class Dialog_CallHistoryServiceServiceTestStub: ServiceClientTestStubBase, Dialog_CallHistoryServiceService {
  var deleteHistoryRequests: [Dialog_DeleteHistoryRequest] = []
  var deleteHistoryResponses: [Dialog_DeleteHistoryResponse] = []
  func deleteHistory(_ request: Dialog_DeleteHistoryRequest, metadata customMetadata: Metadata) throws -> Dialog_DeleteHistoryResponse {
    deleteHistoryRequests.append(request)
    defer { deleteHistoryResponses.removeFirst() }
    return deleteHistoryResponses.first!
  }
  @discardableResult
  func deleteHistory(_ request: Dialog_DeleteHistoryRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_DeleteHistoryResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceDeleteHistoryCall {
    let response = try self.deleteHistory(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallHistoryServiceDeleteHistoryCallTestStub()
  }

  var getDiffRequests: [Dialog_GetDiffRequet] = []
  var getDiffResponses: [Dialog_GetDiffResponse] = []
  func getDiff(_ request: Dialog_GetDiffRequet, metadata customMetadata: Metadata) throws -> Dialog_GetDiffResponse {
    getDiffRequests.append(request)
    defer { getDiffResponses.removeFirst() }
    return getDiffResponses.first!
  }
  @discardableResult
  func getDiff(_ request: Dialog_GetDiffRequet, metadata customMetadata: Metadata, completion: @escaping (Dialog_GetDiffResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceGetDiffCall {
    let response = try self.getDiff(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallHistoryServiceGetDiffCallTestStub()
  }

  var getPageRequests: [Dialog_GetPageRequest] = []
  var getPageResponses: [Dialog_GetPageResponse] = []
  func getPage(_ request: Dialog_GetPageRequest, metadata customMetadata: Metadata) throws -> Dialog_GetPageResponse {
    getPageRequests.append(request)
    defer { getPageResponses.removeFirst() }
    return getPageResponses.first!
  }
  @discardableResult
  func getPage(_ request: Dialog_GetPageRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_GetPageResponse?, CallResult) -> Void) throws -> Dialog_CallHistoryServiceGetPageCall {
    let response = try self.getPage(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallHistoryServiceGetPageCallTestStub()
  }

  var connectCalls: [Dialog_CallHistoryServiceConnectCall] = []
  func connect(metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Dialog_CallHistoryServiceConnectCall {
    defer { connectCalls.removeFirst() }
    return connectCalls.first!
  }

}

