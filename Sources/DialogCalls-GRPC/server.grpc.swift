//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: server.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Dispatch
import Foundation
import SwiftGRPC
import SwiftProtobuf

public protocol Dialog_CallServiceConnectCall: ClientCallBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Dialog_ConnectResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Dialog_ConnectResponse?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: Dialog_ConnectRequest, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Dialog_ConnectRequest, timeout: DispatchTime) throws

  /// Call this to close the sending connection. Blocking.
  func closeSend() throws
  /// Call this to close the sending connection. Nonblocking.
  func closeSend(completion: (() -> Void)?) throws
}

public extension Dialog_CallServiceConnectCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Dialog_ConnectResponse? { return try self._receive(timeout: timeout) }
}

public extension Dialog_CallServiceConnectCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Dialog_ConnectRequest, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Dialog_CallServiceConnectCallBase: ClientCallBidirectionalStreamingBase<Dialog_ConnectRequest, Dialog_ConnectResponse>, Dialog_CallServiceConnectCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/Connect" }
}

public protocol Dialog_CallServiceAackCall: ClientCallUnary {}

fileprivate final class Dialog_CallServiceAackCallBase: ClientCallUnaryBase<Dialog_AckRequest, Dialog_AckResponse>, Dialog_CallServiceAackCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/Aack" }
}

public protocol Dialog_CallServiceGenerateIdCall: ClientCallUnary {}

fileprivate final class Dialog_CallServiceGenerateIdCallBase: ClientCallUnaryBase<Dialog_GenerateIdRequest, Dialog_GenerateIdResponse>, Dialog_CallServiceGenerateIdCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/GenerateId" }
}

public protocol Dialog_CallServiceCreateCallCall: ClientCallUnary {}

fileprivate final class Dialog_CallServiceCreateCallCallBase: ClientCallUnaryBase<Dialog_CreateCallRequest, Dialog_CreateCallResponse>, Dialog_CallServiceCreateCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/CreateCall" }
}

public protocol Dialog_CallServiceTransferCallCall: ClientCallUnary {}

fileprivate final class Dialog_CallServiceTransferCallCallBase: ClientCallUnaryBase<Dialog_TransferCallRequest, Dialog_TransferCallResponse>, Dialog_CallServiceTransferCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/TransferCall" }
}

public protocol Dialog_CallServiceRingingCallCall: ClientCallUnary {}

fileprivate final class Dialog_CallServiceRingingCallCallBase: ClientCallUnaryBase<Dialog_RingingCallRequest, Dialog_RingingCallResponse>, Dialog_CallServiceRingingCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/RingingCall" }
}

public protocol Dialog_CallServiceAnswerCallCall: ClientCallUnary {}

fileprivate final class Dialog_CallServiceAnswerCallCallBase: ClientCallUnaryBase<Dialog_AnswerCallRequest, Dialog_AnswerCallResponse>, Dialog_CallServiceAnswerCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/AnswerCall" }
}

public protocol Dialog_CallServiceDisposeCallCall: ClientCallUnary {}

fileprivate final class Dialog_CallServiceDisposeCallCallBase: ClientCallUnaryBase<Dialog_DisposeCallRequest, Dialog_DisposeCallResponse>, Dialog_CallServiceDisposeCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/DisposeCall" }
}

public protocol Dialog_CallServiceLockCallCall: ClientCallUnary {}

fileprivate final class Dialog_CallServiceLockCallCallBase: ClientCallUnaryBase<Dialog_LockCallRequest, Dialog_LockCallResponse>, Dialog_CallServiceLockCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/LockCall" }
}

public protocol Dialog_CallServiceJoinCallCall: ClientCallUnary {}

fileprivate final class Dialog_CallServiceJoinCallCallBase: ClientCallUnaryBase<Dialog_JoinCallRequest, Dialog_JoinCallResponse>, Dialog_CallServiceJoinCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/JoinCall" }
}

public protocol Dialog_CallServiceIceCallCall: ClientCallUnary {}

fileprivate final class Dialog_CallServiceIceCallCallBase: ClientCallUnaryBase<Dialog_IceCallRequest, Dialog_IceCallResponse>, Dialog_CallServiceIceCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/IceCall" }
}


/// Instantiate Dialog_CallServiceServiceClient, then call methods of this protocol to make API calls.
public protocol Dialog_CallServiceService: ServiceClient {
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  func connect(metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Dialog_CallServiceConnectCall

  /// Synchronous. Unary.
  func aack(_ request: Dialog_AckRequest, metadata customMetadata: Metadata) throws -> Dialog_AckResponse
  /// Asynchronous. Unary.
  @discardableResult
  func aack(_ request: Dialog_AckRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_AckResponse?, CallResult) -> Void) throws -> Dialog_CallServiceAackCall

  /// Synchronous. Unary.
  func generateId(_ request: Dialog_GenerateIdRequest, metadata customMetadata: Metadata) throws -> Dialog_GenerateIdResponse
  /// Asynchronous. Unary.
  @discardableResult
  func generateId(_ request: Dialog_GenerateIdRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_GenerateIdResponse?, CallResult) -> Void) throws -> Dialog_CallServiceGenerateIdCall

  /// Synchronous. Unary.
  func createCall(_ request: Dialog_CreateCallRequest, metadata customMetadata: Metadata) throws -> Dialog_CreateCallResponse
  /// Asynchronous. Unary.
  @discardableResult
  func createCall(_ request: Dialog_CreateCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_CreateCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceCreateCallCall

  /// Synchronous. Unary.
  func transferCall(_ request: Dialog_TransferCallRequest, metadata customMetadata: Metadata) throws -> Dialog_TransferCallResponse
  /// Asynchronous. Unary.
  @discardableResult
  func transferCall(_ request: Dialog_TransferCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_TransferCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceTransferCallCall

  /// Synchronous. Unary.
  func ringingCall(_ request: Dialog_RingingCallRequest, metadata customMetadata: Metadata) throws -> Dialog_RingingCallResponse
  /// Asynchronous. Unary.
  @discardableResult
  func ringingCall(_ request: Dialog_RingingCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_RingingCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceRingingCallCall

  /// Synchronous. Unary.
  func answerCall(_ request: Dialog_AnswerCallRequest, metadata customMetadata: Metadata) throws -> Dialog_AnswerCallResponse
  /// Asynchronous. Unary.
  @discardableResult
  func answerCall(_ request: Dialog_AnswerCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_AnswerCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceAnswerCallCall

  /// Synchronous. Unary.
  func disposeCall(_ request: Dialog_DisposeCallRequest, metadata customMetadata: Metadata) throws -> Dialog_DisposeCallResponse
  /// Asynchronous. Unary.
  @discardableResult
  func disposeCall(_ request: Dialog_DisposeCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_DisposeCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceDisposeCallCall

  /// Synchronous. Unary.
  func lockCall(_ request: Dialog_LockCallRequest, metadata customMetadata: Metadata) throws -> Dialog_LockCallResponse
  /// Asynchronous. Unary.
  @discardableResult
  func lockCall(_ request: Dialog_LockCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_LockCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceLockCallCall

  /// Synchronous. Unary.
  func joinCall(_ request: Dialog_JoinCallRequest, metadata customMetadata: Metadata) throws -> Dialog_JoinCallResponse
  /// Asynchronous. Unary.
  @discardableResult
  func joinCall(_ request: Dialog_JoinCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_JoinCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceJoinCallCall

  /// Synchronous. Unary.
  func iceCall(_ request: Dialog_IceCallRequest, metadata customMetadata: Metadata) throws -> Dialog_IceCallResponse
  /// Asynchronous. Unary.
  @discardableResult
  func iceCall(_ request: Dialog_IceCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_IceCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceIceCallCall

}

public extension Dialog_CallServiceService {
  /// Asynchronous. Bidirectional-streaming.
  func connect(completion: ((CallResult) -> Void)?) throws -> Dialog_CallServiceConnectCall {
    return try self.connect(metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func aack(_ request: Dialog_AckRequest) throws -> Dialog_AckResponse {
    return try self.aack(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func aack(_ request: Dialog_AckRequest, completion: @escaping (Dialog_AckResponse?, CallResult) -> Void) throws -> Dialog_CallServiceAackCall {
    return try self.aack(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func generateId(_ request: Dialog_GenerateIdRequest) throws -> Dialog_GenerateIdResponse {
    return try self.generateId(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func generateId(_ request: Dialog_GenerateIdRequest, completion: @escaping (Dialog_GenerateIdResponse?, CallResult) -> Void) throws -> Dialog_CallServiceGenerateIdCall {
    return try self.generateId(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func createCall(_ request: Dialog_CreateCallRequest) throws -> Dialog_CreateCallResponse {
    return try self.createCall(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func createCall(_ request: Dialog_CreateCallRequest, completion: @escaping (Dialog_CreateCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceCreateCallCall {
    return try self.createCall(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func transferCall(_ request: Dialog_TransferCallRequest) throws -> Dialog_TransferCallResponse {
    return try self.transferCall(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func transferCall(_ request: Dialog_TransferCallRequest, completion: @escaping (Dialog_TransferCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceTransferCallCall {
    return try self.transferCall(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func ringingCall(_ request: Dialog_RingingCallRequest) throws -> Dialog_RingingCallResponse {
    return try self.ringingCall(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func ringingCall(_ request: Dialog_RingingCallRequest, completion: @escaping (Dialog_RingingCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceRingingCallCall {
    return try self.ringingCall(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func answerCall(_ request: Dialog_AnswerCallRequest) throws -> Dialog_AnswerCallResponse {
    return try self.answerCall(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func answerCall(_ request: Dialog_AnswerCallRequest, completion: @escaping (Dialog_AnswerCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceAnswerCallCall {
    return try self.answerCall(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func disposeCall(_ request: Dialog_DisposeCallRequest) throws -> Dialog_DisposeCallResponse {
    return try self.disposeCall(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func disposeCall(_ request: Dialog_DisposeCallRequest, completion: @escaping (Dialog_DisposeCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceDisposeCallCall {
    return try self.disposeCall(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func lockCall(_ request: Dialog_LockCallRequest) throws -> Dialog_LockCallResponse {
    return try self.lockCall(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func lockCall(_ request: Dialog_LockCallRequest, completion: @escaping (Dialog_LockCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceLockCallCall {
    return try self.lockCall(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func joinCall(_ request: Dialog_JoinCallRequest) throws -> Dialog_JoinCallResponse {
    return try self.joinCall(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func joinCall(_ request: Dialog_JoinCallRequest, completion: @escaping (Dialog_JoinCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceJoinCallCall {
    return try self.joinCall(request, metadata: self.metadata, completion: completion)
  }

  /// Synchronous. Unary.
  func iceCall(_ request: Dialog_IceCallRequest) throws -> Dialog_IceCallResponse {
    return try self.iceCall(request, metadata: self.metadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  func iceCall(_ request: Dialog_IceCallRequest, completion: @escaping (Dialog_IceCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceIceCallCall {
    return try self.iceCall(request, metadata: self.metadata, completion: completion)
  }

}

public final class Dialog_CallServiceServiceClient: ServiceClientBase, Dialog_CallServiceService {
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  public func connect(metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Dialog_CallServiceConnectCall {
    return try Dialog_CallServiceConnectCallBase(channel)
      .start(metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func aack(_ request: Dialog_AckRequest, metadata customMetadata: Metadata) throws -> Dialog_AckResponse {
    return try Dialog_CallServiceAackCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func aack(_ request: Dialog_AckRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_AckResponse?, CallResult) -> Void) throws -> Dialog_CallServiceAackCall {
    return try Dialog_CallServiceAackCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func generateId(_ request: Dialog_GenerateIdRequest, metadata customMetadata: Metadata) throws -> Dialog_GenerateIdResponse {
    return try Dialog_CallServiceGenerateIdCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func generateId(_ request: Dialog_GenerateIdRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_GenerateIdResponse?, CallResult) -> Void) throws -> Dialog_CallServiceGenerateIdCall {
    return try Dialog_CallServiceGenerateIdCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func createCall(_ request: Dialog_CreateCallRequest, metadata customMetadata: Metadata) throws -> Dialog_CreateCallResponse {
    return try Dialog_CallServiceCreateCallCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func createCall(_ request: Dialog_CreateCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_CreateCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceCreateCallCall {
    return try Dialog_CallServiceCreateCallCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func transferCall(_ request: Dialog_TransferCallRequest, metadata customMetadata: Metadata) throws -> Dialog_TransferCallResponse {
    return try Dialog_CallServiceTransferCallCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func transferCall(_ request: Dialog_TransferCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_TransferCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceTransferCallCall {
    return try Dialog_CallServiceTransferCallCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func ringingCall(_ request: Dialog_RingingCallRequest, metadata customMetadata: Metadata) throws -> Dialog_RingingCallResponse {
    return try Dialog_CallServiceRingingCallCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func ringingCall(_ request: Dialog_RingingCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_RingingCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceRingingCallCall {
    return try Dialog_CallServiceRingingCallCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func answerCall(_ request: Dialog_AnswerCallRequest, metadata customMetadata: Metadata) throws -> Dialog_AnswerCallResponse {
    return try Dialog_CallServiceAnswerCallCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func answerCall(_ request: Dialog_AnswerCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_AnswerCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceAnswerCallCall {
    return try Dialog_CallServiceAnswerCallCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func disposeCall(_ request: Dialog_DisposeCallRequest, metadata customMetadata: Metadata) throws -> Dialog_DisposeCallResponse {
    return try Dialog_CallServiceDisposeCallCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func disposeCall(_ request: Dialog_DisposeCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_DisposeCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceDisposeCallCall {
    return try Dialog_CallServiceDisposeCallCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func lockCall(_ request: Dialog_LockCallRequest, metadata customMetadata: Metadata) throws -> Dialog_LockCallResponse {
    return try Dialog_CallServiceLockCallCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func lockCall(_ request: Dialog_LockCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_LockCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceLockCallCall {
    return try Dialog_CallServiceLockCallCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func joinCall(_ request: Dialog_JoinCallRequest, metadata customMetadata: Metadata) throws -> Dialog_JoinCallResponse {
    return try Dialog_CallServiceJoinCallCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func joinCall(_ request: Dialog_JoinCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_JoinCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceJoinCallCall {
    return try Dialog_CallServiceJoinCallCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func iceCall(_ request: Dialog_IceCallRequest, metadata customMetadata: Metadata) throws -> Dialog_IceCallResponse {
    return try Dialog_CallServiceIceCallCallBase(channel)
      .run(request: request, metadata: customMetadata)
  }
  /// Asynchronous. Unary.
  @discardableResult
  public func iceCall(_ request: Dialog_IceCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_IceCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceIceCallCall {
    return try Dialog_CallServiceIceCallCallBase(channel)
      .start(request: request, metadata: customMetadata, completion: completion)
  }

}

class Dialog_CallServiceConnectCallTestStub: ClientCallBidirectionalStreamingTestStub<Dialog_ConnectRequest, Dialog_ConnectResponse>, Dialog_CallServiceConnectCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/Connect" }
}

class Dialog_CallServiceAackCallTestStub: ClientCallUnaryTestStub, Dialog_CallServiceAackCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/Aack" }
}

class Dialog_CallServiceGenerateIdCallTestStub: ClientCallUnaryTestStub, Dialog_CallServiceGenerateIdCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/GenerateId" }
}

class Dialog_CallServiceCreateCallCallTestStub: ClientCallUnaryTestStub, Dialog_CallServiceCreateCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/CreateCall" }
}

class Dialog_CallServiceTransferCallCallTestStub: ClientCallUnaryTestStub, Dialog_CallServiceTransferCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/TransferCall" }
}

class Dialog_CallServiceRingingCallCallTestStub: ClientCallUnaryTestStub, Dialog_CallServiceRingingCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/RingingCall" }
}

class Dialog_CallServiceAnswerCallCallTestStub: ClientCallUnaryTestStub, Dialog_CallServiceAnswerCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/AnswerCall" }
}

class Dialog_CallServiceDisposeCallCallTestStub: ClientCallUnaryTestStub, Dialog_CallServiceDisposeCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/DisposeCall" }
}

class Dialog_CallServiceLockCallCallTestStub: ClientCallUnaryTestStub, Dialog_CallServiceLockCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/LockCall" }
}

class Dialog_CallServiceJoinCallCallTestStub: ClientCallUnaryTestStub, Dialog_CallServiceJoinCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/JoinCall" }
}

class Dialog_CallServiceIceCallCallTestStub: ClientCallUnaryTestStub, Dialog_CallServiceIceCallCall {
  override class var method: String { return "/im.dlg.sdk.calls.client.p2p.api.CallService/IceCall" }
}

class Dialog_CallServiceServiceTestStub: ServiceClientTestStubBase, Dialog_CallServiceService {
  var connectCalls: [Dialog_CallServiceConnectCall] = []
  func connect(metadata customMetadata: Metadata, completion: ((CallResult) -> Void)?) throws -> Dialog_CallServiceConnectCall {
    defer { connectCalls.removeFirst() }
    return connectCalls.first!
  }

  var aackRequests: [Dialog_AckRequest] = []
  var aackResponses: [Dialog_AckResponse] = []
  func aack(_ request: Dialog_AckRequest, metadata customMetadata: Metadata) throws -> Dialog_AckResponse {
    aackRequests.append(request)
    defer { aackResponses.removeFirst() }
    return aackResponses.first!
  }
  @discardableResult
  func aack(_ request: Dialog_AckRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_AckResponse?, CallResult) -> Void) throws -> Dialog_CallServiceAackCall {
    let response = try self.aack(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallServiceAackCallTestStub()
  }

  var generateIdRequests: [Dialog_GenerateIdRequest] = []
  var generateIdResponses: [Dialog_GenerateIdResponse] = []
  func generateId(_ request: Dialog_GenerateIdRequest, metadata customMetadata: Metadata) throws -> Dialog_GenerateIdResponse {
    generateIdRequests.append(request)
    defer { generateIdResponses.removeFirst() }
    return generateIdResponses.first!
  }
  @discardableResult
  func generateId(_ request: Dialog_GenerateIdRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_GenerateIdResponse?, CallResult) -> Void) throws -> Dialog_CallServiceGenerateIdCall {
    let response = try self.generateId(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallServiceGenerateIdCallTestStub()
  }

  var createCallRequests: [Dialog_CreateCallRequest] = []
  var createCallResponses: [Dialog_CreateCallResponse] = []
  func createCall(_ request: Dialog_CreateCallRequest, metadata customMetadata: Metadata) throws -> Dialog_CreateCallResponse {
    createCallRequests.append(request)
    defer { createCallResponses.removeFirst() }
    return createCallResponses.first!
  }
  @discardableResult
  func createCall(_ request: Dialog_CreateCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_CreateCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceCreateCallCall {
    let response = try self.createCall(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallServiceCreateCallCallTestStub()
  }

  var transferCallRequests: [Dialog_TransferCallRequest] = []
  var transferCallResponses: [Dialog_TransferCallResponse] = []
  func transferCall(_ request: Dialog_TransferCallRequest, metadata customMetadata: Metadata) throws -> Dialog_TransferCallResponse {
    transferCallRequests.append(request)
    defer { transferCallResponses.removeFirst() }
    return transferCallResponses.first!
  }
  @discardableResult
  func transferCall(_ request: Dialog_TransferCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_TransferCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceTransferCallCall {
    let response = try self.transferCall(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallServiceTransferCallCallTestStub()
  }

  var ringingCallRequests: [Dialog_RingingCallRequest] = []
  var ringingCallResponses: [Dialog_RingingCallResponse] = []
  func ringingCall(_ request: Dialog_RingingCallRequest, metadata customMetadata: Metadata) throws -> Dialog_RingingCallResponse {
    ringingCallRequests.append(request)
    defer { ringingCallResponses.removeFirst() }
    return ringingCallResponses.first!
  }
  @discardableResult
  func ringingCall(_ request: Dialog_RingingCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_RingingCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceRingingCallCall {
    let response = try self.ringingCall(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallServiceRingingCallCallTestStub()
  }

  var answerCallRequests: [Dialog_AnswerCallRequest] = []
  var answerCallResponses: [Dialog_AnswerCallResponse] = []
  func answerCall(_ request: Dialog_AnswerCallRequest, metadata customMetadata: Metadata) throws -> Dialog_AnswerCallResponse {
    answerCallRequests.append(request)
    defer { answerCallResponses.removeFirst() }
    return answerCallResponses.first!
  }
  @discardableResult
  func answerCall(_ request: Dialog_AnswerCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_AnswerCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceAnswerCallCall {
    let response = try self.answerCall(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallServiceAnswerCallCallTestStub()
  }

  var disposeCallRequests: [Dialog_DisposeCallRequest] = []
  var disposeCallResponses: [Dialog_DisposeCallResponse] = []
  func disposeCall(_ request: Dialog_DisposeCallRequest, metadata customMetadata: Metadata) throws -> Dialog_DisposeCallResponse {
    disposeCallRequests.append(request)
    defer { disposeCallResponses.removeFirst() }
    return disposeCallResponses.first!
  }
  @discardableResult
  func disposeCall(_ request: Dialog_DisposeCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_DisposeCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceDisposeCallCall {
    let response = try self.disposeCall(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallServiceDisposeCallCallTestStub()
  }

  var lockCallRequests: [Dialog_LockCallRequest] = []
  var lockCallResponses: [Dialog_LockCallResponse] = []
  func lockCall(_ request: Dialog_LockCallRequest, metadata customMetadata: Metadata) throws -> Dialog_LockCallResponse {
    lockCallRequests.append(request)
    defer { lockCallResponses.removeFirst() }
    return lockCallResponses.first!
  }
  @discardableResult
  func lockCall(_ request: Dialog_LockCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_LockCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceLockCallCall {
    let response = try self.lockCall(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallServiceLockCallCallTestStub()
  }

  var joinCallRequests: [Dialog_JoinCallRequest] = []
  var joinCallResponses: [Dialog_JoinCallResponse] = []
  func joinCall(_ request: Dialog_JoinCallRequest, metadata customMetadata: Metadata) throws -> Dialog_JoinCallResponse {
    joinCallRequests.append(request)
    defer { joinCallResponses.removeFirst() }
    return joinCallResponses.first!
  }
  @discardableResult
  func joinCall(_ request: Dialog_JoinCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_JoinCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceJoinCallCall {
    let response = try self.joinCall(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallServiceJoinCallCallTestStub()
  }

  var iceCallRequests: [Dialog_IceCallRequest] = []
  var iceCallResponses: [Dialog_IceCallResponse] = []
  func iceCall(_ request: Dialog_IceCallRequest, metadata customMetadata: Metadata) throws -> Dialog_IceCallResponse {
    iceCallRequests.append(request)
    defer { iceCallResponses.removeFirst() }
    return iceCallResponses.first!
  }
  @discardableResult
  func iceCall(_ request: Dialog_IceCallRequest, metadata customMetadata: Metadata, completion: @escaping (Dialog_IceCallResponse?, CallResult) -> Void) throws -> Dialog_CallServiceIceCallCall {
    let response = try self.iceCall(request)
    let callResult = CallResult(success: true, statusCode: .ok, statusMessage: "OK", resultData: nil, initialMetadata: nil, trailingMetadata: nil)
    completion(response, callResult)
    return Dialog_CallServiceIceCallCallTestStub()
  }

}

