// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: history.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Направление звонка
public enum Dialog_CALL_DIRECTION: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case inbound // = 1
  case outbound // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .inbound
    case 2: self = .outbound
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .inbound: return 1
    case .outbound: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Dialog_CALL_DIRECTION: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Dialog_CALL_DIRECTION] = [
    .unknown,
    .inbound,
    .outbound,
  ]
}

#endif  // swift(>=4.2)

public struct Dialog_GetPageRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seq: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._seq ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._seq = newValue}
  }
  /// Returns true if `seq` has been explicitly set.
  public var hasSeq: Bool {return _storage._seq != nil}
  /// Clears the value of `seq`. Subsequent reads from it will return its default value.
  public mutating func clearSeq() {_uniqueStorage()._seq = nil}

  public var size: Int32 {
    get {return _storage._size}
    set {_uniqueStorage()._size = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Dialog_GetPageResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var page: [Dialog_CallHistoryRecord] = []

  public var hasMore_p: Bool = false

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dialog_GetDiffRequet {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seq: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._seq ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._seq = newValue}
  }
  /// Returns true if `seq` has been explicitly set.
  public var hasSeq: Bool {return _storage._seq != nil}
  /// Clears the value of `seq`. Subsequent reads from it will return its default value.
  public mutating func clearSeq() {_uniqueStorage()._seq = nil}

  public var size: Int32 {
    get {return _storage._size}
    set {_uniqueStorage()._size = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Dialog_GetDiffResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var seq: SwiftProtobuf.Google_Protobuf_Int64Value {
    get {return _storage._seq ?? SwiftProtobuf.Google_Protobuf_Int64Value()}
    set {_uniqueStorage()._seq = newValue}
  }
  /// Returns true if `seq` has been explicitly set.
  public var hasSeq: Bool {return _storage._seq != nil}
  /// Clears the value of `seq`. Subsequent reads from it will return its default value.
  public mutating func clearSeq() {_uniqueStorage()._seq = nil}

  public var deletedCallID: [String] {
    get {return _storage._deletedCallID}
    set {_uniqueStorage()._deletedCallID = newValue}
  }

  public var created: [Dialog_CallHistoryRecord] {
    get {return _storage._created}
    set {_uniqueStorage()._created = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Dialog_CallHistoryRecord {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Направление звонка
  public var direction: Dialog_CALL_DIRECTION = .unknown

  /// Участники звонка
  public var participants: [Dialog_CallHistoryRecord.CallParticipant] = []

  /// Звонки в свертке
  public var calls: [Dialog_CallHistoryRecord.Call] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  /// Структура звонка
  public struct Call {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    /// Идентификатор звонка
    public var callID: String {
      get {return _storage._callID}
      set {_uniqueStorage()._callID = newValue}
    }

    /// Начат
    public var started: Int64 {
      get {return _storage._started}
      set {_uniqueStorage()._started = newValue}
    }

    public var duration: Int64 {
      get {return _storage._duration}
      set {_uniqueStorage()._duration = newValue}
    }

    /// Причина завершения
    public var result: Dialog_CallHistoryRecord.Call.CallResult {
      get {return _storage._result ?? Dialog_CallHistoryRecord.Call.CallResult()}
      set {_uniqueStorage()._result = newValue}
    }
    /// Returns true if `result` has been explicitly set.
    public var hasResult: Bool {return _storage._result != nil}
    /// Clears the value of `result`. Subsequent reads from it will return its default value.
    public mutating func clearResult() {_uniqueStorage()._result = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    /// Причина завершения
    public struct CallResult {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      public var result: Dialog_CallHistoryRecord.Call.CallResult.CallResultOneOf {
        get {return _storage._result ?? Dialog_CallHistoryRecord.Call.CallResult.CallResultOneOf()}
        set {_uniqueStorage()._result = newValue}
      }
      /// Returns true if `result` has been explicitly set.
      public var hasResult: Bool {return _storage._result != nil}
      /// Clears the value of `result`. Subsequent reads from it will return its default value.
      public mutating func clearResult() {_uniqueStorage()._result = nil}

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      /// Отменен
      public struct CallResultCancelled {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// Отклонен
      public struct CallResultRejected {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// Занято
      public struct CallResultBusy {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// Завершился после разговора
      public struct CallResultFinished {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      /// Переведен
      public struct CallResultTransferred {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public init() {}
      }

      public struct CallResultOneOf {
        // SwiftProtobuf.Message conformance is added in an extension below. See the
        // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
        // methods supported on all messages.

        public var result: OneOf_Result? {
          get {return _storage._result}
          set {_uniqueStorage()._result = newValue}
        }

        public var cancelled: Dialog_CallHistoryRecord.Call.CallResult.CallResultCancelled {
          get {
            if case .cancelled(let v)? = _storage._result {return v}
            return Dialog_CallHistoryRecord.Call.CallResult.CallResultCancelled()
          }
          set {_uniqueStorage()._result = .cancelled(newValue)}
        }

        public var rejected: Dialog_CallHistoryRecord.Call.CallResult.CallResultRejected {
          get {
            if case .rejected(let v)? = _storage._result {return v}
            return Dialog_CallHistoryRecord.Call.CallResult.CallResultRejected()
          }
          set {_uniqueStorage()._result = .rejected(newValue)}
        }

        public var busy: Dialog_CallHistoryRecord.Call.CallResult.CallResultBusy {
          get {
            if case .busy(let v)? = _storage._result {return v}
            return Dialog_CallHistoryRecord.Call.CallResult.CallResultBusy()
          }
          set {_uniqueStorage()._result = .busy(newValue)}
        }

        public var finished: Dialog_CallHistoryRecord.Call.CallResult.CallResultFinished {
          get {
            if case .finished(let v)? = _storage._result {return v}
            return Dialog_CallHistoryRecord.Call.CallResult.CallResultFinished()
          }
          set {_uniqueStorage()._result = .finished(newValue)}
        }

        public var transferred: Dialog_CallHistoryRecord.Call.CallResult.CallResultTransferred {
          get {
            if case .transferred(let v)? = _storage._result {return v}
            return Dialog_CallHistoryRecord.Call.CallResult.CallResultTransferred()
          }
          set {_uniqueStorage()._result = .transferred(newValue)}
        }

        public var unknownFields = SwiftProtobuf.UnknownStorage()

        public enum OneOf_Result: Equatable {
          case cancelled(Dialog_CallHistoryRecord.Call.CallResult.CallResultCancelled)
          case rejected(Dialog_CallHistoryRecord.Call.CallResult.CallResultRejected)
          case busy(Dialog_CallHistoryRecord.Call.CallResult.CallResultBusy)
          case finished(Dialog_CallHistoryRecord.Call.CallResult.CallResultFinished)
          case transferred(Dialog_CallHistoryRecord.Call.CallResult.CallResultTransferred)

        #if !swift(>=4.1)
          public static func ==(lhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultOneOf.OneOf_Result, rhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultOneOf.OneOf_Result) -> Bool {
            switch (lhs, rhs) {
            case (.cancelled(let l), .cancelled(let r)): return l == r
            case (.rejected(let l), .rejected(let r)): return l == r
            case (.busy(let l), .busy(let r)): return l == r
            case (.finished(let l), .finished(let r)): return l == r
            case (.transferred(let l), .transferred(let r)): return l == r
            default: return false
            }
          }
        #endif
        }

        public init() {}

        fileprivate var _storage = _StorageClass.defaultInstance
      }

      public init() {}

      fileprivate var _storage = _StorageClass.defaultInstance
    }

    public init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  /// Структура участника звонка
  public struct CallParticipant {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var parameters: Dictionary<String,String> = [:]

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}
}

public struct Dialog_DeleteHistoryRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var callID: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dialog_DeleteHistoryResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

/// Подключение стримом
public struct Dialog_ConnectRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Dialog_ConnectResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var data: OneOf_Data? {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  public var deleted: Dialog_ConnectResponse.ConnectResponseDeleted {
    get {
      if case .deleted(let v)? = _storage._data {return v}
      return Dialog_ConnectResponse.ConnectResponseDeleted()
    }
    set {_uniqueStorage()._data = .deleted(newValue)}
  }

  public var created: Dialog_CallHistoryRecord {
    get {
      if case .created(let v)? = _storage._data {return v}
      return Dialog_CallHistoryRecord()
    }
    set {_uniqueStorage()._data = .created(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Data: Equatable {
    case deleted(Dialog_ConnectResponse.ConnectResponseDeleted)
    case created(Dialog_CallHistoryRecord)

  #if !swift(>=4.1)
    public static func ==(lhs: Dialog_ConnectResponse.OneOf_Data, rhs: Dialog_ConnectResponse.OneOf_Data) -> Bool {
      switch (lhs, rhs) {
      case (.deleted(let l), .deleted(let r)): return l == r
      case (.created(let l), .created(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  public struct ConnectResponseDeleted {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var callID: [String] = []

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "im.dlg.sdk.calls.client.history.api"

extension Dialog_CALL_DIRECTION: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CALL_DIRECTION_UNKNOWN"),
    1: .same(proto: "CALL_DIRECTION_INBOUND"),
    2: .same(proto: "CALL_DIRECTION_OUTBOUND"),
  ]
}

extension Dialog_GetPageRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPageRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    2: .same(proto: "size"),
  ]

  fileprivate class _StorageClass {
    var _seq: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _size: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _seq = source._seq
      _size = source._size
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._seq)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._size)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._seq {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._size != 0 {
        try visitor.visitSingularInt32Field(value: _storage._size, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_GetPageRequest, rhs: Dialog_GetPageRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._seq != rhs_storage._seq {return false}
        if _storage._size != rhs_storage._size {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_GetPageResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetPageResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "page"),
    2: .same(proto: "hasMore"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.page)
      case 2: try decoder.decodeSingularBoolField(value: &self.hasMore_p)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.page.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.page, fieldNumber: 1)
    }
    if self.hasMore_p != false {
      try visitor.visitSingularBoolField(value: self.hasMore_p, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_GetPageResponse, rhs: Dialog_GetPageResponse) -> Bool {
    if lhs.page != rhs.page {return false}
    if lhs.hasMore_p != rhs.hasMore_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_GetDiffRequet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDiffRequet"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    2: .same(proto: "size"),
  ]

  fileprivate class _StorageClass {
    var _seq: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _size: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _seq = source._seq
      _size = source._size
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._seq)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._size)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._seq {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._size != 0 {
        try visitor.visitSingularInt32Field(value: _storage._size, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_GetDiffRequet, rhs: Dialog_GetDiffRequet) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._seq != rhs_storage._seq {return false}
        if _storage._size != rhs_storage._size {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_GetDiffResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetDiffResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "seq"),
    2: .same(proto: "deletedCallId"),
    3: .same(proto: "created"),
  ]

  fileprivate class _StorageClass {
    var _seq: SwiftProtobuf.Google_Protobuf_Int64Value? = nil
    var _deletedCallID: [String] = []
    var _created: [Dialog_CallHistoryRecord] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _seq = source._seq
      _deletedCallID = source._deletedCallID
      _created = source._created
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._seq)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._deletedCallID)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._created)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._seq {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._deletedCallID.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._deletedCallID, fieldNumber: 2)
      }
      if !_storage._created.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._created, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_GetDiffResponse, rhs: Dialog_GetDiffResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._seq != rhs_storage._seq {return false}
        if _storage._deletedCallID != rhs_storage._deletedCallID {return false}
        if _storage._created != rhs_storage._created {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_CallHistoryRecord: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CallHistoryRecord"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "direction"),
    2: .same(proto: "participants"),
    3: .same(proto: "calls"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.direction)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.participants)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.calls)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.direction != .unknown {
      try visitor.visitSingularEnumField(value: self.direction, fieldNumber: 1)
    }
    if !self.participants.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.participants, fieldNumber: 2)
    }
    if !self.calls.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.calls, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_CallHistoryRecord, rhs: Dialog_CallHistoryRecord) -> Bool {
    if lhs.direction != rhs.direction {return false}
    if lhs.participants != rhs.participants {return false}
    if lhs.calls != rhs.calls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_CallHistoryRecord.Call: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dialog_CallHistoryRecord.protoMessageName + ".Call"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "callId"),
    2: .same(proto: "started"),
    3: .same(proto: "duration"),
    4: .same(proto: "result"),
  ]

  fileprivate class _StorageClass {
    var _callID: String = String()
    var _started: Int64 = 0
    var _duration: Int64 = 0
    var _result: Dialog_CallHistoryRecord.Call.CallResult? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _callID = source._callID
      _started = source._started
      _duration = source._duration
      _result = source._result
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._callID)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._started)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._duration)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._result)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._callID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._callID, fieldNumber: 1)
      }
      if _storage._started != 0 {
        try visitor.visitSingularInt64Field(value: _storage._started, fieldNumber: 2)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularInt64Field(value: _storage._duration, fieldNumber: 3)
      }
      if let v = _storage._result {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_CallHistoryRecord.Call, rhs: Dialog_CallHistoryRecord.Call) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._callID != rhs_storage._callID {return false}
        if _storage._started != rhs_storage._started {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._result != rhs_storage._result {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_CallHistoryRecord.Call.CallResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dialog_CallHistoryRecord.Call.protoMessageName + ".CallResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  fileprivate class _StorageClass {
    var _result: Dialog_CallHistoryRecord.Call.CallResult.CallResultOneOf? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _result = source._result
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._result)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._result {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_CallHistoryRecord.Call.CallResult, rhs: Dialog_CallHistoryRecord.Call.CallResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._result != rhs_storage._result {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_CallHistoryRecord.Call.CallResult.CallResultCancelled: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dialog_CallHistoryRecord.Call.CallResult.protoMessageName + ".CallResultCancelled"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultCancelled, rhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultCancelled) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_CallHistoryRecord.Call.CallResult.CallResultRejected: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dialog_CallHistoryRecord.Call.CallResult.protoMessageName + ".CallResultRejected"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultRejected, rhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultRejected) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_CallHistoryRecord.Call.CallResult.CallResultBusy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dialog_CallHistoryRecord.Call.CallResult.protoMessageName + ".CallResultBusy"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultBusy, rhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultBusy) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_CallHistoryRecord.Call.CallResult.CallResultFinished: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dialog_CallHistoryRecord.Call.CallResult.protoMessageName + ".CallResultFinished"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultFinished, rhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultFinished) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_CallHistoryRecord.Call.CallResult.CallResultTransferred: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dialog_CallHistoryRecord.Call.CallResult.protoMessageName + ".CallResultTransferred"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultTransferred, rhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultTransferred) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_CallHistoryRecord.Call.CallResult.CallResultOneOf: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dialog_CallHistoryRecord.Call.CallResult.protoMessageName + ".CallResultOneOf"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cancelled"),
    2: .same(proto: "rejected"),
    3: .same(proto: "busy"),
    5: .same(proto: "finished"),
    6: .same(proto: "transferred"),
  ]

  fileprivate class _StorageClass {
    var _result: Dialog_CallHistoryRecord.Call.CallResult.CallResultOneOf.OneOf_Result?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _result = source._result
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Dialog_CallHistoryRecord.Call.CallResult.CallResultCancelled?
          if let current = _storage._result {
            try decoder.handleConflictingOneOf()
            if case .cancelled(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._result = .cancelled(v)}
        case 2:
          var v: Dialog_CallHistoryRecord.Call.CallResult.CallResultRejected?
          if let current = _storage._result {
            try decoder.handleConflictingOneOf()
            if case .rejected(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._result = .rejected(v)}
        case 3:
          var v: Dialog_CallHistoryRecord.Call.CallResult.CallResultBusy?
          if let current = _storage._result {
            try decoder.handleConflictingOneOf()
            if case .busy(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._result = .busy(v)}
        case 5:
          var v: Dialog_CallHistoryRecord.Call.CallResult.CallResultFinished?
          if let current = _storage._result {
            try decoder.handleConflictingOneOf()
            if case .finished(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._result = .finished(v)}
        case 6:
          var v: Dialog_CallHistoryRecord.Call.CallResult.CallResultTransferred?
          if let current = _storage._result {
            try decoder.handleConflictingOneOf()
            if case .transferred(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._result = .transferred(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._result {
      case .cancelled(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .rejected(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .busy(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .finished(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .transferred(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultOneOf, rhs: Dialog_CallHistoryRecord.Call.CallResult.CallResultOneOf) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._result != rhs_storage._result {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_CallHistoryRecord.CallParticipant: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dialog_CallHistoryRecord.protoMessageName + ".CallParticipant"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "parameters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: &self.parameters)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.parameters.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMap<SwiftProtobuf.ProtobufString,SwiftProtobuf.ProtobufString>.self, value: self.parameters, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_CallHistoryRecord.CallParticipant, rhs: Dialog_CallHistoryRecord.CallParticipant) -> Bool {
    if lhs.parameters != rhs.parameters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_DeleteHistoryRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteHistoryRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "callId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.callID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.callID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.callID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_DeleteHistoryRequest, rhs: Dialog_DeleteHistoryRequest) -> Bool {
    if lhs.callID != rhs.callID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_DeleteHistoryResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeleteHistoryResponse"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_DeleteHistoryResponse, rhs: Dialog_DeleteHistoryResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_ConnectRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConnectRequest"
  public static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_ConnectRequest, rhs: Dialog_ConnectRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_ConnectResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ConnectResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deleted"),
    2: .same(proto: "created"),
  ]

  fileprivate class _StorageClass {
    var _data: Dialog_ConnectResponse.OneOf_Data?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _data = source._data
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Dialog_ConnectResponse.ConnectResponseDeleted?
          if let current = _storage._data {
            try decoder.handleConflictingOneOf()
            if case .deleted(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._data = .deleted(v)}
        case 2:
          var v: Dialog_CallHistoryRecord?
          if let current = _storage._data {
            try decoder.handleConflictingOneOf()
            if case .created(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._data = .created(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._data {
      case .deleted(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .created(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_ConnectResponse, rhs: Dialog_ConnectResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._data != rhs_storage._data {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Dialog_ConnectResponse.ConnectResponseDeleted: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Dialog_ConnectResponse.protoMessageName + ".ConnectResponseDeleted"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "callId"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedStringField(value: &self.callID)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.callID.isEmpty {
      try visitor.visitRepeatedStringField(value: self.callID, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Dialog_ConnectResponse.ConnectResponseDeleted, rhs: Dialog_ConnectResponse.ConnectResponseDeleted) -> Bool {
    if lhs.callID != rhs.callID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
