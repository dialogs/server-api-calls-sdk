syntax = "proto3";

package im.dlg.sdk.calls;
option java_package = "im.dlg.sdk.calls.server.api";

/**
 * Сервис P2P звонков
 */
service CallService {
    /**
     * Подключение с установкой стрима, для передачи на клиента 
     * сообщений от сервера
     */
    rpc connect (stream Empty) returns (stream ServerStreamMessage) {};
    /**
     * Создание звонка выполняется в два этапа: createCall создаст структуру на 
     * сервере и вернет callId, 
     * которая будет ждать joinCall запрос c callId
     */
    rpc createCall (CreateCallRequest) returns (CreateCallResponse) {};
    /**
     * Pickup или ответ на входящий звонок 
     */
    rpc answerCall (AnswerCallRequest) returns (AnswerCallResponse) {};
    /**
     * Сообщение серверу, что клиент увидел звонок и начал звонить
     */
    rpc ringingCall (RingingCallRequest) returns (Empty) {};
    /**
     * Передача на сервер SDP + ICE. Звонок стартует как последовательность из createCall и последующими joinCall
     */
    rpc joinCall (JoinCallRequest) returns (JoinCallResponse) {};
    /**
     * Завершение звонка
     */
    rpc disposeCall (DisposeCallRequest) returns (Empty) {};
    /**
     * Подтверждение получения сообщения от сервера
     */
    rpc ack (AckRequest) returns (Empty) {};
}

message Empty {}

message Int64Value {
  int64 value = 1;
}

message Int32Value {
  int32 value = 1;
}

message StringValue {
  string value = 1;
}

/**
 Причина заверщения звонка
 */
enum DISPOSE_REASON {
    DISPOSE_REASON_UNKNOWN = 0;
    SERVER_ERROR = 1;
    NORMAL = 2;
    CALLEE_NOT_FOUND = 3;
    CALLER_DISABLED = 4;
    CALLEE_DISABLED = 5;
    NO_ANSWER = 6;
    BUSY = 7;
    PICKED_UP = 8;
    CALL_DOES_NOT_EXISTS = 9;
    REJECTED = 10;
    INVALID_IP_RANGE = 11;
}

/**
 Направление звонка
 */
enum CALL_DIRECTION {
    CALL_DIRECTION_UNKNOWN = 0;
    INBOUND = 1;
    OUTBOUND = 2;
}

/**
 Статус звонка
 */
enum CALL_STATE {
    CALL_STATE_UNKNOWN = 0;
    // Пытаюсь установить соединение с абонентом
    TRIYNG = 1;
    // Пока не используется
    PROGRESS = 2;
    // Абонент увидел звонок
    RINGING = 3;
    // Абонент ответил (медийка еще какое-то время будет подниматься)
    TALKING = 4;
    // Разговор завершен
    FINISHED = 5;
}

/**
 Настройки ICE - взаимодействия
 */
enum ICE_SETTINGS {
    ICE_SETTINGS_UNKNOWN = 0;
    // только через TURN
    RELAY = 1;
    // через TURN и напрямую
    ALL = 2;
    // не использовать обмен ICE
    NONE = 3;
}

enum PEER_TYPE {
    PEER_TYPE_UNKNOWN = 0;
    USER = 1;
    GROUP = 2;
}

/**
 Настройки ICE от сервера
 */
message IceSettingsModel {

    message IceServerModel {
        string username = 1;
        string password = 2;
        repeated string urls = 3;
    }    
    
    ICE_SETTINGS settings = 1;
    repeated IceServerModel iceServers = 2;
}

/**
 Структура абонента, отправляемая клиентом
 */
message ClientAbonentModel {
    message UserModel {
        int32 userId = 1;
        int64 accessHash = 2;
    }
    
    StringValue name = 1;
    StringValue nick = 2;
    StringValue phone = 3;
    UserModel user = 4;
}

/**
 Структура абонента, получаемая с сервера
 */
message ServerAbonentModel {
    int32 abonentId = 1;
    ClientAbonentModel abonent = 2;
}

message SdpModel {
    string type = 1;
    string sdp = 2;
}

/**
 Структура обмена SDP и ICE
 */
message JoinCallModel {

    message IceCandidateIdModel {
    
        message IceCandidateModel {
            string candidate = 1;
            string sdpMid = 2;
            int32 sdpMLineIndex = 3;
        }
        
        string id = 1;
        IceCandidateModel iceCandidate = 2;
    }
    
    string stateId = 1;
    int32 instanceId = 2;
    int64 callId = 3;
    string sdpId = 4;
    SdpModel sdp = 5;
    repeated IceCandidateIdModel ice = 6;
}

message DisposeCallModel {
    string stateId = 1;
    Int32Value instanceId = 2;
    int64 callId = 3;
}

message AckRequest {
    string stateId = 1;
    int64 callId = 2;
}

message CreateCallRequest {
    ClientAbonentModel abonent = 1;
}

message CreateCallResponse {
    
    message SuccessModel {
        int64 callId = 1;
        int32 instanceId = 2;
        IceSettingsModel iceSettings = 3;
    }
    
    oneof result {
        SuccessModel success = 1;
        DISPOSE_REASON disposeReason = 2;
    }
}
message RingingCallRequest {
    int64 callId = 1;
}

message AnswerCallRequest {
    int64 callId = 1;
}

message AnswerCallResponse {
    
    message SuccessModel {
        int32 instanceId = 1;
        IceSettingsModel iceSettings = 2;
    }
    
    oneof result {
        SuccessModel success = 1; 
        DISPOSE_REASON disposeReason = 2;
    }
}

message JoinCallRequest {
    JoinCallModel join = 1;
}

message JoinCallResponse {
    
    oneof result {
        Empty success = 1;
        DISPOSE_REASON disposeReason = 2;
    }
}

message DisposeCallRequest {
    DisposeCallModel dispose = 1;
}

message ServerStreamMessage {
    
    message ServerDisposeCallModel {
        DISPOSE_REASON disposeReason = 1;
        DisposeCallModel dispose = 2;
    }
    
    message ServerCallsModel {

        message ServerCallModel {
            int32 stateId = 1;
            int64 callId = 2;
            Int32Value instanceId = 3;
            CALL_STATE state = 4;
            CALL_DIRECTION direction = 5;
            bool currentDevice = 6;
            ServerAbonentModel abonent = 7;
            Int64Value answerDateUTC = 8;
            bool video = 9;
        }
        
        repeated ServerCallModel serverCalls = 1;
    }
    
    message PermissionsModel {
        oneof calls {
            DISPOSE_REASON disallow = 1;
            Empty allow = 2;
        }
    }
    
    oneof event {
        JoinCallModel join = 1;
        ServerDisposeCallModel dispose = 2;
        ServerCallsModel serverCalls = 3;
        PermissionsModel permissions = 4;
    }
}