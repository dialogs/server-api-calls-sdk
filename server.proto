syntax = "proto3";

package im.dlg.sdk.calls;
option java_package = "im.dlg.sdk.calls.server.api";

/* Call Service - main server interface for calls SDK */
service CallService {
    /* Stream connection for server -> client messages */
    rpc connect (stream Empty) returns (stream ServerStreamMessage) {};
    
    /* Prepare call on server */
    rpc createCall (CreateCallRequest) returns (CreateCallResponse) {};
    
    /* Prepare call on server */
    rpc answerCall (AnswerCallRequest) returns (AnswerCallResponse) {};
    
    /* Indicate that client see incommin call */
    rpc ringingCall (RingingCallRequest) returns (Empty) {};
    
    /* SDP exchange */
    rpc joinCall (JoinCallRequest) returns (JoinCallResponse) {};
    
    /* Hangup call */
    rpc disposeCall (DisposeCallRequest) returns (Empty) {};
    
    /* Indicate server message received */
    rpc ack (AckRequest) returns (Empty) {};
    
    /* Join to group call */
    rpc joinGroupCall (JoinGroupCallRequest) returns (JoinGroupCallResponse) {}
    
    /* Leave group call */
    rpc hangupGroupCall (HangupGroupCallRequest) returns (Empty) {}
}

message Empty {}

enum DISPOSE_REASON {
    DISPOSE_REASON_UNKNOWN = 0;
    /* Server internal error */
    SERVER_ERROR = 1;
    
    /* Normal call ending */
    NORMAL = 2;
    
    /* Callee not found */
    CALLEE_NOT_FOUND = 3;
    
    /* Caller is not allowed to call */
    CALLER_DISABLED = 4;
    
    /* Callee is not allowed to call */
    CALLEE_DISABLED = 5;
    
    /* Callee not answered */
    NO_ANSWER = 6;
    
    /* Callee is busy */
    BUSY = 7;
    
    /* Call was pickup up on another device */
    PICKED_UP = 8;
    
    /* Call is not exists */
    CALL_DOES_NOT_EXISTS = 9;
}

enum CALL_DIRECTION {
    CALL_DIRECTION_UNKNOWN = 0;
    INBOUND = 1;
    OUTBOUND = 2;
}

enum CALL_STATE {
    CALL_STATE_UNKNOWN = 0;
    TRIYNG = 1;
    PROGRESS = 2;
    RINGING = 3;
    TALKING = 4;
    FINISHED = 5;
}

enum ICE_SETTINGS {
    ICE_SETTINGS_UNKNOWN = 0;
    RELAY = 1;
    ALL = 2;
    NONE = 3;
}

enum PEER_TYPE {
    PEER_TYPE_UNKNOWN = 0;
    USER = 1;
    GROUP = 2;
}

message IceServerModel {
    string username = 1;
    string password = 2;
    repeated string urls = 3;
}

message IceSettingsModel {
    ICE_SETTINGS settings = 1;
    repeated IceServerModel iceServers = 2;
}


message PeerIdModel {
    int64 peerId = 1;
    int64 accessHash = 2;
}

message AbonentModel {
    
    message KnownAbonentModel {
        
        string name = 1;
        string nick = 2;
        string phone = 3;
        PeerIdModel user = 4;
    }
    
    int64 abonentId = 1;
    KnownAbonentModel abonent = 2;
}

message SdpModel {
    string type = 1;
    string sdp = 2;
}

message JoinCallModel {

    message IceCandidateIdModel {
    
        message IceCandidateModel {
            string candidate = 1;
            string sdpMid = 2;
            int32 sdpMLineIndex = 3;
        }
        
        string id = 1;
        IceCandidateModel iceCandidate = 2;
    }
    
    string stateId = 1;
    int64 instanceId = 2;
    int64 callId = 3;
    string sdpId = 4;
    SdpModel sdp = 5;
    repeated IceCandidateIdModel ice = 6;
}

message DisposeCallModel {
    string stateId = 1;
    int64 instanceId = 2;
    int64 callId = 3;
}

message AckRequest {
    string stateId = 1;
    int64 callId = 2;
}

message CreateCallRequest {
    AbonentModel abonent = 2;
}

message CreateCallResponse {
    
    message SuccessModel {
        int64 callId = 1;
        int64 instanceId = 2;
        IceSettingsModel iceSettings = 3;
    }
    
    oneof result {
        SuccessModel success = 1;
        DISPOSE_REASON disposeReason = 2;
    }
}
message RingingCallRequest {
    int64 callId = 1;
}

message AnswerCallRequest {
    int64 callId = 1;
}

message AnswerCallResponse {
    
    message SuccessModel {
        int64 instanceId = 1;
        IceSettingsModel iceSettings = 2;
    }
    
    oneof result {
        SuccessModel success = 1; 
        DISPOSE_REASON disposeReason = 2;
    }
}

message JoinCallRequest {
    JoinCallModel join = 1;
}

message JoinCallResponse {
    
    oneof result {
        Empty success = 1;
        DISPOSE_REASON disposeReason = 2;
    }
}

message DisposeCallRequest {
    DisposeCallModel dispose = 1;
}

message PeerModel {
    PEER_TYPE type = 1;
    PeerIdModel peerId = 2;
}

message JoinGroupCallRequest {
    PeerModel peer = 1;
}

message JoinGroupCallResponse {
    
    oneof reuslt {
        Empty success = 1;
        DISPOSE_REASON disposeReason = 2;
    }
}

message HangupGroupCallRequest {
    string groupCallId = 1;
}


message ServerStreamMessage {
    
    message ServerDisposeCallModel {
        DISPOSE_REASON disposeReason = 1;
        DisposeCallModel dispose = 2;
    }

    message ServerCallModel {
        int64 stateId = 1;
        int64 callId = 2;
        int64 instanceId = 3;
        CALL_STATE state = 4;
        CALL_DIRECTION direction = 5;
        bool currentDevice = 6;
        AbonentModel abonent = 7;
        int64 answerDateUTC = 8;
    }
    
    message ServerCallsModel {
        repeated ServerCallModel serverCalls = 1;
    }
    
    message GroupCallsModel {
        
        message GroupCallModel {
            
            message GroupCallParticipantModel {
                bool active = 1;
                PeerIdModel user = 2;
            }
            
            int64 stateId = 1;
            string groupCallId = 2;
            int64 participantId = 3;
            PeerIdModel from = 4;
            PeerModel too = 5;
            repeated GroupCallParticipantModel partitipants = 6;
        }
        
        repeated GroupCallModel groupCalls = 1;
    }
    
    message ServerCallsStateModel {
        ServerCallsModel serverCalls = 1;
        GroupCallsModel groupCalls = 2;
    }
    
    oneof event {
        JoinCallModel join = 1;
        ServerDisposeCallModel dispose = 2;
        ServerCallsStateModel callsState = 3;
    }
}