syntax = "proto3";

package im.dlg.sdk.calls.client;
option java_package = "im.dlg.sdk.calls.server.api";

service CallService {
    rpc connect (stream ConnectRequest) returns (stream ConnectResponse) {};
    rpc getSeq (GetSeqRequest) returns (GetSeqResponse) {};
    rpc generateCallId (GenerateCallIdRequest) returns (GenerateCallIdResponse) {};
    rpc createCall (CreateCallRequest) returns (CreateCallResponse) {};
    rpc ringingCall (RingingCallRequest) returns (RingingCallResponse) {};
    rpc answerCall (AnswerCallRequest) returns (AnswerCallResponse) {};
    rpc disposeCall (DisposeCallRequest) returns (DisposeCallResponse) {};
    rpc lockCall (LockCallRequest) returns (LockCallResponse) {};
    rpc joinCall (JoinCallRequest) returns (JoinCallResponse) {};
    rpc ice (IceRequest) returns (IceResponse) {};
    rpc ack (AckRequest) returns (AckResponse) {};
}

message Empty {
}

message Int64Value {
  int64 value = 1;
}

message Int32Value {
  int32 value = 1;
}

enum CALL_DIRECTION {
    CALL_DIRECTION_UNKNOWN = 0;
    CALL_DIRECTION_INBOUND = 1;
    CALL_DIRECTION_OUTBOUND = 2;
}

enum CALL_STATE {
    CALL_STATE_UNKNOWN = 0;
    CALL_STATE_TRIYNG = 1;
    CALL_STATE_PROGRESS = 2;
    CALL_STATE_RINGING = 3;
    CALL_STATE_TALKING = 4;
    CALL_STATE_FINISHED = 5;
}

enum DISPOSE_REASON {
    DISPOSE_REASON_UNKNOWN = 0;
    DISPOSE_REASON_ERROR = 1;
    DISPOSE_REASON_CALL_DOES_NOT_EXISTS = 2;
    DISPOSE_REASON_PICKED_UP = 3;
    DISPOSE_REASON_NORMAL = 4;
    DISPOSE_REASON_NOT_FOUND = 5;
    DISPOSE_REASON_NO_ANSWER = 6;
    DISPOSE_REASON_BUSY = 7;
    DISPOSE_REASON_REJECTED = 8;
}


enum HANGUP_REASON {
    HANGUP_REASON_UNKNOWN = 0;
    HANGUP_REASON_ERROR = 1;
    HANGUP_REASON_NORMAL = 2;
    HANGUP_REASON_BUSY = 3;
    HANGUP_REASON_REJECTED = 4;
}

message SeqModel {
    int32 a = 1;
    int32 b = 2;
}

message SeqValue {
    SeqModel value = 1;
}

enum ICE_SETTINGS {
    ICE_SETTINGS_UNKNOWN = 0;
    ICE_SETTINGS_NONE = 1;
    ICE_SETTINGS_RELAY = 2;
    ICE_SETTINGS_ALL = 3;
}

message IceSettingsModel {

    message IceServerModel {
        string username = 1;
        string password = 2;
        repeated string urls = 3;
    }    
    
    ICE_SETTINGS settings = 1;
    repeated IceServerModel iceServers = 2;
}
    
message ConnectToCallSuccessModel {
    CallSettingsModel settings = 1;
}

message CallSettingsModel {
    IceSettingsModel ice = 1;
}

message SdpModel {
    string sdp = 1;
    string type = 2;
}

message GetSeqRequest {
}

message GetSeqResponse {
    SeqModel seq = 1;
}

message GenerateCallIdRequest {
}

message GenerateCallIdResponse {
    string callId = 1;
}

message CreateCallRequest {
    string callId = 1;
    SeqModel instanceSeq = 2;
    map<string, string> parameters = 3;
}

message CreateCallResponse {
    
    message CreateCallSuccessResponseModel {
        map<string, string> parameters = 1;
        ConnectToCallSuccessModel connect = 2;
    }
    
    message CreateCallErrorResponseModel {
        map<string, string> parameters = 1;
    }
    
    oneof result {
        CreateCallErrorResponseModel error = 1;
        CreateCallSuccessResponseModel success = 2;
    }
}

message RingingCallRequest {
    string callId = 1;
}

message RingingCallResponse {
}

message AnswerCallRequest {
    string callId = 1;
    SeqModel instanceSeq = 2;
}

message AnswerCallResponse {
    
    oneof result {
        Empty callDoesNotExists = 1;
        Empty callAlreadyPickedUp = 2;
        ConnectToCallSuccessModel success = 3;
    }
}

message DisposeCallRequest {
    string callId = 1;
    SeqModel instanceSeq = 2;
    HANGUP_REASON reason = 3;
    map<string, string> parameters = 4;
}

message DisposeCallResponse {
}

message LockCallRequest {
    string callId = 1;
    SeqModel instanceSeq = 2;
    SeqModel sdpSeq = 3;
}

message LockCallResponse {
    bool locked = 1;
}

message JoinCallRequest {
    string callId = 1;
    SeqModel instanceSeq = 2;
    SeqModel peerConnectionSeq = 3;
    SeqModel sdpSeq = 4;
    SdpModel sdp = 5;
}

message JoinCallResponse {
}

message IceRequest {

    message IceCandidateModel {
        string candidate = 1;
        string sdpMid = 2;
        int32 sdpMLineIndex = 3;
    }
    
    string callId = 1;
    SeqModel instanceSeq = 2;
    SeqModel peerConnectionSeq = 3;
    SeqModel iceSeq = 4;
    IceCandidateModel ice = 5;
}

message IceResponse {
}

message AckRequest {
    SeqModel seq = 1;
}

message AckResponse {
}

message ConnectRequest {
}

message ConnectResponse {
    
    message ServerCallList {
        
        message ServerCallModel {
            int32 stateId = 1;
            string callId = 2;
            SeqValue instanceSeq = 3;
            CALL_STATE state = 4;
            CALL_DIRECTION direction = 5;
            bool currentDevice = 6;
            Int64Value answerDateUTC = 7;
            bool video = 8;
            map<string, string> parameters = 9;
        }
        
        repeated ServerCallModel calls = 2;
    }
    
    message DisposeCallModel {
        string callId = 1;
        SeqModel instanceSeq = 2;
        DISPOSE_REASON reason = 3;
        map<string, string> parameters = 4;
    }
    
    SeqModel seq = 1;
    
    oneof data {
        ServerCallList calls = 2;
        DisposeCallModel dispose = 3;
        JoinCallRequest join = 4;
        IceRequest ice = 5;
    }
}

